---
layout: post
title: "Next Palindrome after a 1000000 digit number - SPOJ - PALIN"
date: 2012-10-21T18:38:00+05:30
tags:
 - SPOJ
 - Sport Programming
---

<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">I always have afraid of the problems which require string processing, to be solved. This is one such problem. The problem description as stated in SPOJ (<a href="http://www.spoj.pl/problems/PALIN/">http://www.spoj.pl/problems/PALIN/</a>) and my solution to this problem is&nbsp;<a href="http://ideone.com/osqLhp">http://ideone.com/osqLhp</a>&nbsp;(I am sure, I can improve this code)<br /><br /><h1 style="background-color: #f6f9e0; color: #000020; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 20px; font-weight: normal; text-align: left;"><span style="font-size: 13px; text-align: justify;">A positive integer is called a</span><span style="font-size: 13px; text-align: justify;">&nbsp;</span><i style="background-color: transparent; font-size: 13px; text-align: justify;">palindrome</i><span style="font-size: 13px; text-align: justify;">&nbsp;</span><span style="font-size: 13px; text-align: justify;">if its representation in the decimal system is the same when read from left to right and from right to left. For a given positive integer K of not more than 1000000 digits, write the value of the smallest palindrome larger than K to output. Numbers are always displayed without leading zeros.</span></h1><br /><h3 style="background-color: #f6f9e0; color: #000020; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 15px; text-align: center;">Input</h3><div align="justify" style="background-color: #f6f9e0; color: #000020; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; text-align: justify;">The first line contains integer t, the number of test cases. Integers K are given in the next t lines.</div><h3 style="background-color: #f6f9e0; color: #000020; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 15px; text-align: center;">Output</h3><div align="justify" style="background-color: #f6f9e0; color: #000020; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; text-align: justify;">For each K, output the smallest palindrome larger than K.</div><h3 style="background-color: #f6f9e0; color: #000020; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 15px; text-align: center;">Example</h3><div style="background-color: #f6f9e0; color: #000020; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; text-align: justify;"><tt><b>Input:</b></tt><br />2<br />808<br />2133</div><div style="background-color: #f6f9e0; color: #000020; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; text-align: justify;"><br /></div><div style="background-color: #f6f9e0; color: #000020; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; text-align: justify;"><tt><b>Output:</b></tt><br />818<br />2222</div><br /><br />We know that, there is no integral data type which is as sophisticated as to&nbsp;accommodate a 1000000 digits number (a million digits in a number). So only option is to use string. And we also know what palindrome is. A number or a string of characters, is the same when expressed from left to right and right to left. For example, AMMA, MADAM, MALAYALAM, 11, 505, 797979797, ...<br /><br />Lets assume the input number as N. If we read through the problem, we are asked to find the next (greater than the number provided) palindrome which exists after the number N. As we see in the examples, 818 is the next big palindrome after 808 and 2222 is the next big palindrome after 2133. If the numbers are small, we can try brute-force approach.<br /><br /><h3 style="text-align: left;">Brute force approach:</h3><br /><ol style="text-align: left;"><li>Read the number N</li><li>Increment by 1</li><li>Check whether it is a palindrome or not</li><li>If Yes, Print the number and exit</li><li>If No, goto step 2</li></ol><div><br /></div><div>This approach is quite simple and easy to implement. But, this may not work always when we have time constraints. If the number N becomes as big as a 1000000 digit number, program with this approach would produce output after a very long time. We all want our programs to produce outputs so quickly, don't we?&nbsp;Let us look at the approach which I followed to solve this problem.</div><div><br /></div><h3 style="text-align: left;">My approach:</h3><div><ol style="text-align: left;"><li>Read the number as a string and store it in STR and the number of digits as N</li><li>Split STR into two halves STR1 and STR3, if the number of digits in STR is odd, the middle digit will be in STR2 otherwise it is empty</li><li>If the Reverse of STR1 is greater than STR3, Print STR1 + STR2 + Reverse (STR1) and exit</li><li>make all digits of STR3 as '0'</li><li>If N is even,&nbsp;</li><ol><li>increment STR1</li><li>Goto step 1 with input (Incremented STR1 + STR3)</li></ol><li>If N is odd,&nbsp;</li><ol><li>increment STR2</li><ol><li>If Incremented STR2 is 10,&nbsp;</li><ol><li>set STR2 as "0"</li><li>increment STR1</li><li>Goto step 1 with input (Incremented STR1 + STR2 + STR3)</li></ol><li>If Incremented STR2 is lesser than 10</li><ol><li>Goto step 1 with input (STR1 + STR2 + STR3)</li></ol></ol></ol></ol><div>The observation which I made after analyzing few examples is, if the second half of the number is smaller than the reverse of the first half of the number, just replacing the&nbsp;second half&nbsp;with&nbsp;the reverse of the first half produces the required output. If it is not smaller than the reverse of the first half, increment the first half and then replace the second half with the incremented first half. This is the basic idea but the above algorithm includes all the corner cases.</div></div><br /><b>My solution:</b></div><script type="text/javascript" src="http://ideone.com/api/embed.js/link/osqLhp"></script></div>
